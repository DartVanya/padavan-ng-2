diff -urNw hdparm-9.65-ref/Makefile hdparm-9.65/Makefile
--- hdparm-9.65-ref/Makefile	2020-06-26 13:55:43.000000000 +0300
+++ hdparm-9.65/Makefile	2024-10-03 00:17:05.948682179 +0300
@@ -3,6 +3,9 @@
 # DESTDIR is for non root installs (eg packages, NFS) only!
 DESTDIR =
 
+# usable for embedded devices
+HDPARM_MINI = 1
+
 binprefix = 
 manprefix = /usr
 exec_prefix = $(binprefix)/
@@ -13,24 +16,32 @@
 CC ?= gcc
 STRIP ?= strip
 
-CFLAGS := -O2 -W -Wall -Wbad-function-cast -Wcast-align -Wpointer-arith -Wcast-qual -Wshadow -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -fkeep-inline-functions -Wwrite-strings -Waggregate-return -Wnested-externs -Wtrigraphs $(CFLAGS)
-
+CFLAGS := -Os -W -Wall -Wbad-function-cast -Wcast-align -Wpointer-arith -Wcast-qual -Wshadow -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -fkeep-inline-functions -Wwrite-strings -Waggregate-return -Wnested-externs -Wtrigraphs $(CFLAGS)
+ifdef HDPARM_MINI
+CFLAGS += -DHDPARM_MINI
+endif
+
+CFLAGS += -ffunction-sections -fdata-sections -fvisibility=hidden
+LDFLAGS += -Wl,--gc-sections
+
 INSTALL = install
 INSTALL_DATA = $(INSTALL) -m 644
 INSTALL_DIR = $(INSTALL) -m 755 -d
 INSTALL_PROGRAM = $(INSTALL)
 
-OBJS = hdparm.o identify.o sgio.o sysfs.o geom.o fallocate.o fibmap.o fwdownload.o dvdspeed.o wdidle3.o apt.o
+OBJS = hdparm.o identify.o sgio.o sysfs.o geom.o wdidle3.o apt.o
+ifndef HDPARM_MINI
+OBJS += fallocate.o fibmap.o fwdownload.o dvdspeed.o
+endif
 
 all:
 	$(MAKE) -j4 hdparm
 
 static:
 	LDFLAGS=-static $(MAKE)
 
 hdparm: Makefile hdparm.h sgio.h $(OBJS)
-	$(CC) $(LDFLAGS) -o hdparm $(OBJS)
-	$(STRIP) hdparm
+	$(CC) $(CFLAGS) $(LDFLAGS) -o hdparm $(OBJS)
 
 hdparm.o:	hdparm.h sgio.h
 
@@ -56,6 +67,9 @@
 	if [ -d $(DESTDIR)$(mandir) ]; then $(INSTALL_DATA) -D hdparm.8 $(DESTDIR)$(mandir)/man8/hdparm.8 ;\
 	elif [ -d $(DESTDIR)$(oldmandir) ]; then $(INSTALL_DATA) -D hdparm.8 $(DESTDIR)$(oldmandir)/man8/hdparm.8 ; fi
 
+romfs:
+	$(ROMFSINST) /sbin/hdparm
+
 clean:
 	-rm -f hdparm $(OBJS) core 2>/dev/null
 
diff -urNw hdparm-9.65-ref/hdparm.c hdparm-9.65/hdparm.c
--- hdparm-9.65-ref/hdparm.c	2022-09-06 20:02:56.000000000 +0300
+++ hdparm-9.65/hdparm.c	2024-10-03 00:17:05.950682106 +0300
@@ -75,8 +75,10 @@
 static int set_piomode  = 0, get_piomode= 0, piomode = 0;
 static int set_dkeep    = 0, get_dkeep    = 0, dkeep    = 0;
 static int set_standby  = 0, get_standby  = 0, standby= 0;
+#if !defined (HDPARM_MINI)
 static int set_xfermode = 0, get_xfermode = 0;
 static int xfermode_requested= 0;
+#endif
 static int set_lookahead= 0, get_lookahead= 0, lookahead= 0;
 static int set_prefetch = 0, get_prefetch = 0, prefetch = 0;
 static int set_defects  = 0, get_defects  = 0, defects  = 0;
@@ -89,12 +91,16 @@
 static int set_sleepnow   = 0, get_sleepnow   = 0;
 static int set_powerup_in_standby = 0, get_powerup_in_standby = 0, powerup_in_standby = 0;
 static int get_hitachi_temp = 0, set_hitachi_temp = 0;
+#if !defined (HDPARM_MINI)
 static int security_prompt_for_password = 0;
+#endif
 static int security_freeze   = 0;
 static int security_master = 0, security_mode = 0;
 static int enhanced_erase = 0;
 static int set_security   = 0;
+#if !defined (HDPARM_MINI)
 static int do_dco_freeze = 0, do_dco_restore = 0, do_dco_identify = 0, do_dco_setmax = 0;
+#endif
 static unsigned int security_command = ATA_OP_SECURITY_UNLOCK;
 
 static char security_password[33], *fwpath, *raw_identify_path;
@@ -120,9 +126,12 @@
 
 static int get_powermode  = 0, set_powermode = 0;
 static int set_apmmode = 0, get_apmmode= 0, apmmode = 0;
+#if !defined (HDPARM_MINI)
 static int get_cdromspeed = 0, set_cdromspeed = 0, cdromspeed = 0;
-static int do_IDentity = 0, drq_hsm_error = 0;
 static int do_fwdownload = 0, xfer_mode = 0;
+static int drq_hsm_error = 0;
+#endif
+static int do_IDentity = 0;
 static int	set_busstate = 0, get_busstate = 0, busstate = 0;
 static int	set_reread_partn = 0, get_reread_partn;
 static int	set_acoustic = 0, get_acoustic = 0, acoustic = 0;
@@ -152,8 +161,10 @@
 static int   read_sector = 0;
 static __u64 read_sector_addr = ~0ULL;
 
+#if !defined (HDPARM_MINI)
 static int   set_max_sectors = 0, set_max_permanent, get_native_max_sectors = 0;
 static __u64 set_max_addr = 0;
+#endif
 
 static int	get_doreset = 0, set_doreset = 0;
 static int	i_know_what_i_am_doing = 0;
@@ -648,6 +659,7 @@
 	printf(")\n");
 }
 
+#if !defined (HDPARM_MINI)
 struct xfermode_entry {
 	int val;
 	const char *name;
@@ -755,6 +767,7 @@
 	}
 	printf(")\n");
 }
+#endif
 
 static unsigned int get_erase_timeout_secs (int fd, int enhanced)
 {
@@ -1240,6 +1253,7 @@
 	exit(EINVAL);
 }
 
+#if !defined (HDPARM_MINI)
 static __u16 *get_dco_identify_data (int fd, int quietly)
 {
 	static __u8 args[4+512];
@@ -1327,7 +1341,6 @@
 		exit(err);
 }
 
-
 static __u64 do_get_native_max_sectors (int fd)
 {
 	int err = 0;
@@ -1401,6 +1414,7 @@
 	return max;
 	
 }
+#endif
 
 static int do_make_bad_sector (int fd, __u64 lba, const char *devname)
 {
@@ -1852,6 +1866,7 @@
 	return err;
 }
 
+#if !defined (HDPARM_MINI)
 static int do_set_max_sectors (int fd, __u64 max_lba, int permanent)
 {
 	int err = 0;
@@ -1897,6 +1912,7 @@
 
 	return err;
 }
+#endif
 
 static void usage_help (int clue, int rc)
 {
@@ -1914,7 +1930,9 @@
 	" -C   Check drive power mode status\n"
 	" -d   Get/set using_dma flag\n"
 	" -D   Enable/disable drive defect management\n"
+#if !defined (HDPARM_MINI)
 	" -E   Set cd/dvd drive speed\n"
+#endif
 	" -f   Flush buffer cache for device on exit\n"
 	" -F   Flush drive write cache\n"
 	" -g   Display drive geometry\n"
@@ -1929,8 +1947,10 @@
 	" -m   Get/set multiple sector count\n"
 	" -M   Get/set acoustic management (0-254, 128: quiet, 254: fast)\n"
 	" -n   Get/set ignore-write-errors flag (0/1)\n"
+#if !defined (HDPARM_MINI)
 	" -N   Get/set max visible number of sectors (HPA) (VERY DANGEROUS)\n"
 	" -p   Set PIO mode on IDE interface chipset (0,1,2,3,4,...)\n"
+#endif
 	" -P   Set drive prefetch count\n"
 	" -q   Change next setting quietly\n"
 	" -Q   Get/set DMA queue_depth (if supported)\n"
@@ -1947,11 +1967,14 @@
 	" -w   Perform device reset (DANGEROUS)\n"
 	" -W   Get/set drive write-caching flag (0/1)\n"
 	" -x   Obsolete\n"
+#if !defined (HDPARM_MINI)
 	" -X   Set IDE xfer mode (DANGEROUS)\n"
+#endif
 	" -y   Put drive in standby mode\n"
 	" -Y   Put drive to sleep\n"
 	" -z   Re-read partition table\n"
 	" -Z   Disable Seagate auto-powersaving mode\n"
+#if !defined (HDPARM_MINI)
 	" --dco-freeze      Freeze/lock current device configuration until next power cycle\n"
 	" --dco-identify    Read/dump device configuration identify data\n"
 	" --dco-restore     Reset device configuration back to factory defaults\n"
@@ -1989,10 +2012,12 @@
 	" --trim-sector-ranges-stdin  Same as above, but reads lba:count pairs from stdin\n"
 	" --verbose                   Display extra diagnostics from some commands\n"
 	" --write-sector              Repair/overwrite a (possibly bad) sector directly on the media (VERY DANGEROUS)\n"
+#endif
 	"\n");
 	exit(rc);
 }
 
+#if !defined (HDPARM_MINI)
 static void security_help (int rc)
 {
 	FILE *desc = rc ? stderr : stdout;
@@ -2025,6 +2050,7 @@
 	);
 	exit(rc);
 }
+#endif
 
 void process_dev (char *devname)
 {
@@ -2226,6 +2252,7 @@
 			perror(" HDIO_DRIVE_CMD(setprefetch) failed");
 		}
 	}
+#if !defined (HDPARM_MINI)
 	if (set_xfermode) {
 		__u8 args[4] = {ATA_OP_SETFEATURES,0,3,0};
 		args[1] = xfermode_requested;
@@ -2238,6 +2265,7 @@
 			perror(" HDIO_DRIVE_CMD(setxfermode) failed");
 		}
 	}
+#endif
 	if (set_lookahead) {
 		__u8 args[4] = {ATA_OP_SETFEATURES,0,0,0};
 		args[2] = lookahead ? 0xaa : 0x55;
@@ -2293,6 +2321,7 @@
 			perror(" HDIO_DRIVE_CMD failed");
 		}
 	}
+#if !defined (HDPARM_MINI)
 	if (set_cdromspeed) {
 		int err1, err2;
 		/* The CDROM_SELECT_SPEED ioctl
@@ -2309,6 +2338,7 @@
 			perror(" SET_STREAMING/CDROM_SELECT_SPEED both failed");
 		}
 	}
+#endif
 	if (set_acoustic) {
 		__u8 args[4];
 		if (get_acoustic)
@@ -2373,6 +2403,7 @@
 		}
 		do_sanitize_cmd(fd);
 	}
+#if !defined (HDPARM_MINI)
 	if (do_dco_identify) {
 		__u16 *dco = get_dco_identify_data(fd, 0);
 		if (dco) {
@@ -2417,6 +2448,7 @@
 			id = NULL; 
 		}
 	}
+#endif
 	if (security_freeze) {
 		__u8 args[4] = {ATA_OP_SECURITY_FREEZE_LOCK,0,0,0};
 		if (!quiet)
@@ -2443,6 +2475,7 @@
 			perror(" HDIO_SET_BUSSTATE failed");
 		}
 	}
+#if !defined (HDPARM_MINI)
 	if (set_max_sectors) {
 		if (!quiet && get_native_max_sectors)
 			printf(" setting max visible sectors to %llu (%s)\n", set_max_addr, set_max_permanent ? "permanent" : "temporary");
@@ -2454,6 +2487,7 @@
 			id = NULL; /* invalidate existing identify data */
 		}
 	}
+#endif
 	if (make_bad_sector) {
 		get_identify_data(fd);
 		if (id) {
@@ -2485,6 +2519,7 @@
 		confirm_i_know_what_i_am_doing("--write-sector", "You are trying to deliberately overwrite a low-level sector on the media.\nThis is a BAD idea, and can easily result in total data loss.");
 		err = do_write_sector(fd, write_sector_addr, devname);
 	}
+#if !defined (HDPARM_MINI)
 	if (do_fwdownload) {
 		if (num_flags_processed > 1 || argc)
 			usage_help(15,EINVAL);
@@ -2498,8 +2533,10 @@
 				exit(err);
 		}
 	}
+#endif
 	if (read_sector)
 		err = do_read_sector(fd, read_sector_addr, devname);
+#if !defined (HDPARM_MINI)
 	if (drq_hsm_error) {
 		get_identify_data(fd);
 		if (id) {
@@ -2514,6 +2551,7 @@
 			fprintf(stderr, "ata status=0x%02x ata error=0x%02x\n", args[0], args[1]);
 		}
 	}
+#endif
 	id = NULL; /* force re-IDENTIFY in case something above modified settings */
 	if (get_hitachi_temp) {
 		__u8 args[4] = {0xf0,0,0x01,0}; /* "Sense Condition", vendor-specific */
@@ -2791,6 +2829,7 @@
 			printf(" busstate      = %2ld (%s)\n", parm, busstate_str(parm));
 		}
 	}
+#if !defined (HDPARM_MINI)
 	if (get_native_max_sectors) {
 		get_identify_data(fd);
 		if (id) {
@@ -2829,8 +2868,9 @@
 				}
 			}
 		
-
 	}	
+#endif
+
 	if (do_ctimings)
 		time_cache(fd);
 	if (do_flush_wcache)
@@ -2894,6 +2934,7 @@
 		exit (err);
 }
 
+#if !defined (HDPARM_MINI)
 #define GET_XFERMODE(flag, num)					\
 	do {							\
 		char *tmpstr = name;				\
@@ -2965,6 +3006,7 @@
 	fprintf(stderr, "read only %u/256 IDENTIFY words from stdin: %s\n", wc, strerror(err));
 	exit(err);
 }
+#endif
 
 static void
 numeric_parm (char c, const char *name, int *val, int *setparm, int *getparm, int min, int max, int set_only)
@@ -2995,6 +3037,7 @@
 #define      DO_FLAG(CH,VAR)              CH:VAR=1;noisy=1;break
 #define    INCR_FLAG(CH,VAR)              CH:VAR++;noisy=1;break
 
+#if !defined (HDPARM_MINI)
 static void get_security_password (int handle_NULL)
 {
 	unsigned int maxlen = sizeof(security_password) - 1;
@@ -3404,12 +3447,12 @@
 	}
 	return 0; /* additional flags allowed */
 }
+#endif
 
 int main (int _argc, char **_argv)
 {
 	int no_more_flags = 0, disallow_flags = 0;
 	char c;
-	char name[32];
 
 	argc = _argc;
 	argv = _argv;
@@ -3451,7 +3494,9 @@
 				case     SET_FLAG('C',powermode);
 				case GET_SET_PARM('d',"dma-enable",dma,0,1);
 				case     SET_PARM('D',"defects-management",defects,0,1);
+#if !defined (HDPARM_MINI)
 				case     SET_PARM('E',"CDROM/DVD-speed",cdromspeed,0,255);
+#endif
 				case      DO_FLAG('f',do_flush);
 				case      DO_FLAG('F',do_flush_wcache);
 				case      DO_FLAG('g',get_geom);
@@ -3466,7 +3511,9 @@
 				case GET_SET_PARM('m',"multmode-count",mult,0,64);
 				case GET_SET_PARM('M',"acoustic-management",acoustic,0,255);
 				case GET_SET_PARM('n',"ignore-write-errors",nowerr,0,1);
+#if !defined (HDPARM_MINI)
 				case              'N': get_set_max_sectors_parms(); break;
+#endif
 				case     SET_PARM('P',"prefetch",prefetch,0,255);
 				case              'q': quiet = 1; noisy = 0; break;
 				case GET_SET_PARM('Q',"queue-depth",dma_q,0,1024);
@@ -3487,6 +3534,7 @@
 				case     SET_FLAG('z',reread_partn);
 				case     SET_FLAG('Z',seagate);
 
+#if !defined (HDPARM_MINI)
 				case '-':
 					if (get_longarg())
 						disallow_flags = 1;
@@ -3505,7 +3553,7 @@
 					if (!set_xfermode)
 						fprintf(stderr, "-X: missing value\n");
 					break;
-
+#endif
 
 				default:
 					usage_help(10,EINVAL);

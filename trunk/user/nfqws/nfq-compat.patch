diff -ru nfq.orig/Makefile nfq/Makefile
--- nfq.orig/Makefile	2024-11-23 16:41:36.944347169 +0700
+++ nfq/Makefile	2024-11-23 16:49:22.309396131 +0700
@@ -1,6 +1,6 @@
 CC ?= gcc
-CFLAGS += -std=gnu99 -Os -flto=auto
+CFLAGS += -std=gnu99 -Os
 CFLAGS_SYSTEMD = -DUSE_SYSTEMD
 CFLAGS_BSD = -Wno-address-of-packed-member
 CFLAGS_CYGWIN = -Wno-address-of-packed-member -static
 LIBS_LINUX = -lnetfilter_queue -lnfnetlink -lz
diff -ru nfq.orig/sec.c nfq/sec.c
--- nfq.orig/sec.c	2024-11-22 03:39:48.316906031 +0700
+++ nfq/sec.c	2024-11-23 16:49:06.567054921 +0700
@@ -13,7 +13,7 @@
 
 #include <sys/prctl.h>
 #include <sys/syscall.h>
-#include <linux/seccomp.h>
+//#include <linux/seccomp.h>
 #include <linux/filter.h>
 // __X32_SYSCALL_BIT defined in linux/unistd.h
 #include <linux/unistd.h>
@@ -151,6 +151,7 @@
 	filter->jf = jf;
 	filter->k = k;
 }
+/*
 // deny all blocked syscalls
 static bool set_seccomp(void)
 {
@@ -173,7 +174,7 @@
 	set_filter(&prog.filter[idx++], BPF_JMP + BPF_JEQ + BPF_K, 0, 2 + BLOCKED_SYSCALL_COUNT, ARCH_NR); // fail
 	set_filter(&prog.filter[idx++], BPF_LD + BPF_W + BPF_ABS, 0, 0, syscall_nr);
 #endif
-
+*/
 /*
 	// ! THIS IS NOT WORKING BECAUSE perror() in glibc dups() stderr
 	set_filter(&prog.filter[idx++], BPF_JMP + BPF_JEQ + BPF_K, 0, 3, SYS_write); // special check for write call
@@ -181,6 +182,7 @@
 	set_filter(&prog.filter[idx++], BPF_JMP + BPF_JGT + BPF_K, 2 + BLOCKED_SYSCALL_COUNT, 0, 2); // 1 - stdout, 2 - stderr. greater are bad
 	set_filter(&prog.filter[idx++], BPF_LD + BPF_W + BPF_ABS, 0, 0, syscall_nr); // reload syscall_nr
 */
+/*
 	for(i=0 ; i<BLOCKED_SYSCALL_COUNT ; i++)
 	{
 		set_filter(&prog.filter[idx++], BPF_JMP + BPF_JEQ + BPF_K, BLOCKED_SYSCALL_COUNT-i, 0, blocked_syscalls[i]);
@@ -189,9 +191,11 @@
 	set_filter(&prog.filter[idx++], BPF_RET + BPF_K, 0, 0, SECCOMP_RET_KILL); // fail case
 	return prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &prog) >= 0;
 }
-
+*/
 bool sec_harden(void)
 {
+	return false;
+/*
 	if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0))
 	{
 		DLOG_PERROR("PR_SET_NO_NEW_PRIVS(prctl)");
@@ -206,6 +210,7 @@
 	}
 #endif
 	return true;
+*/
 }
 
 
diff -ru nfq.orig/sec.h nfq/sec.h
--- nfq.orig/sec.h	2024-11-22 03:39:48.316906031 +0700
+++ nfq/sec.h	2024-11-23 16:49:06.567054921 +0700
@@ -2,11 +2,12 @@
 
 #include <sys/types.h>
 #include <stdbool.h>
+#include <stdint.h>
 
 #ifdef __linux__
 
 #include <stddef.h>
-#include <sys/capability.h>
+#include <linux/capability.h>
 #include <linux/audit.h>
 
 bool checkpcap(uint64_t caps);
@@ -14,9 +15,9 @@
 int getmaxcap(void);
 bool dropcaps(void);
 
-#define syscall_nr (offsetof(struct seccomp_data, nr))
-#define arch_nr (offsetof(struct seccomp_data, arch))
-#define syscall_arg(x) (offsetof(struct seccomp_data, args[x]))
+//#define syscall_nr (offsetof(struct seccomp_data, nr))
+//#define arch_nr (offsetof(struct seccomp_data, arch))
+//#define syscall_arg(x) (offsetof(struct seccomp_data, args[x]))
 
 #if defined(__aarch64__)
 
 
diff -ru nfq.orig/nfqws.c nfq/nfqws.c
--- src/nfq/nfqws.c	2025-03-22 09:07:16.414035711 +0300
+++ nfq/nfqws.c	2025-03-22 16:13:47.787920654 +0300
@@ -225,15 +225,29 @@
 
 	DLOG_CONDUP("unbinding existing nf_queue handler for AF_INET (if any)\n");
 	if (nfq_unbind_pf(*h, AF_INET) < 0) {
-		DLOG_PERROR("nfq_unbind_pf()");
+		DLOG_PERROR("nfq_unbind_pf() AF_INET");
 		goto exiterr;
 	}
 
 	DLOG_CONDUP("binding nfnetlink_queue as nf_queue handler for AF_INET\n");
 	if (nfq_bind_pf(*h, AF_INET) < 0) {
-		DLOG_PERROR("nfq_bind_pf()");
+		DLOG_PERROR("nfq_bind_pf() AF_INET");
 		goto exiterr;
 	}
+	else
+		DLOG_CONDUP("binding for AF_INET success\n");
+	
+	DLOG_CONDUP("unbinding existing nf_queue handler for AF_INET6 (if any)\n");
+	if (nfq_unbind_pf(*h, AF_INET6) < 0)
+		DLOG_PERROR("nfq_unbind_pf() AF_INET6");
+	
+	if (system("grep '^IPV6_ENABLED=1' /etc/storage/zapret/config") == 0) {
+		DLOG_CONDUP("binding nfnetlink_queue as nf_queue handler for AF_INET6\n");
+		if (nfq_bind_pf(*h, AF_INET6) < 0)
+			DLOG_PERROR("nfq_bind_pf() AF_INET6");
+		else
+			DLOG_CONDUP("binding for AF_INET6 success\n");
+	}
 
 	DLOG_CONDUP("binding this socket to queue '%u'\n", params.qnum);
 	*qh = nfq_create_queue(*h, params.qnum, &nfq_cb, &params);

